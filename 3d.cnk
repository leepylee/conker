func main()
  num zsteps = 20
  num xsteps = 20
  num camerax = xsteps / 2
  num cameraz = -9
  
  num[] heights
  num[] cols
  for zd to zsteps // from 1M to xM away from camera
    for xd to xsteps // from left to right
      num prevRowHeight = -5 -sin(xd)*0.5 // M below camera, interesting hills
      if zd > 0
        prevRowHeight = heights[(zd-1) * xsteps + xd]
      end
      num height = prevRowHeight + rnd(3)*0.1 - 0.05 // new height based on row before
      if height < -15
        height = -15
      else if height > -1
        height = -1
      end
      
      if xd > 0
        num prevXHeight = heights[zd * zsteps + xd -1]
        if abs(height - prevXHeight) > 0.3 // average height with neighbour if too far apart
          height = (height + prevXHeight) / 2
        end
      end   
      add heights, height
      add cols, col(255, rnd(80), 100 + rnd(156), rnd(80))
    end
  end 
  console false
end

func num displacement(num zDiff, num xOrY)
  num ratio = xOrY / zDiff
  num disp = ratio * 1000 
  return disp
end

func draw()
  cameraz += 0.05
  style FILL
  num[] xs
  num[] ys
  bool prevRow = false
  for zd to zsteps // from 1M to 100M away from camera
      num dist = zd - cameraz
      if (dist > 0)
        for xd to xsteps // from left to right
          num i = zd * xsteps + xd
          num hy = heights[i]
          num dispy = displacement(zd - cameraz, hy)
          num dispx = displacement(zd - cameraz, xd - camerax)
          num sx = MIDX + dispx
          num sy = MIDY - dispy
          add xs, sx
          add ys, sy
          if (xd > 0 and prevRow)
            num prevXIndex = length(xs) - 2
            num prevZIndex = length(xs) - 1 - xsteps
            num prevXandZIndex = prevZIndex - 1
            paint cols[i]
            polygon xs[prevXandZIndex], ys[prevXandZIndex], xs[prevZIndex], ys[prevZIndex], sx, sy, xs[prevXIndex], ys[prevXIndex]
          end
        end
        prevRow = true
      else
        prevRow = false
    end
  end 
  if cameraz > 10
    cameraz = -10
  end
end
